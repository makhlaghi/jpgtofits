\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename jpgtofits.info
@settitle JPGtoFITS
@documentencoding UTF-8
@c@afourpaper

@c %**end of header

@include version.texi
@set PACKAGE_NAME JPGtoFITS
@set PACKAGE jpgtofits

@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex pg cp

@dircategory Astronomy
@direntry
* JPGtoFITS: (jpgtofits).  Convert a JPG image to a FITS image.
@end direntry

@c Use section titles in cross references, not node titles.
@xrefautomaticsectiontitle on










@c Copyright information:
@copying
This manual is for JPGtoFITS (version @value{VERSION},
@value{UPDATED}) a highly customizable program to convert each color
channel of a JPEG image into a FITS image extension.

Copyright @copyright{} 2014 Mohammad Akhlaghi.
@email{akhlaghi@@astr.tohoku.ac.jp}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is available on
@url{http://www.gnu.org/copyleft/fdl.html}.
@end quotation
@end copying










@c Print title information:
@titlepage
@title JPGtoFITS
@subtitle Convert a JPEG image to a FITS image.
@subtitle for @value{PACKAGE_NAME} version @value{VERSION}, @value{UPDATED}.
@author Mohammad Akhlaghi
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@contents










@c Online version top information.
@ifnottex
@node Top, Overview, (dir), (dir)
@top JPGtoFITS

JPGtoFITS is a tool to convert each color channel of a JPEG image to a
FITS image extension. Currently it is a very small program, but there
is lots of potential for future improvements. See @ref{Overview} for
more details.

Like the program, this manual will be constantly upgraded, so there
might always be unwanted errors or parts of the text that can be
explained better. We would be most grateful if you could inform us if
you spot any such cases.

@ifhtml
To navigate easily in this web page, you can use the @code{Next},
@code{Previous}, @code{Up} and @code{Contents} links in the top and
bottom of each page. @code{Next} and @code{Previous} will take you to
the next or previous topic in the same level, for example from chapter
1 to chapter 2 or vice versa. To go to the sections or subsections,
you have to click on the menu entries that are there when ever a
sub-component to a title is present.
@end ifhtml

@end ifnottex


@c Copyright information for HTML and Text versions:
@ifplaintext
@noindent
---------------------------

@noindent
Copyright notice:
@insertcopying
@end ifplaintext

@ifhtml

Copyright notice:
@insertcopying
@end ifhtml

@menu
* Overview::                    An over view and quick start guide.
* Installation::                Detailed installation guide.
* Running::                     How to run with options.
* Future updates::              List of future updates.
* Index::                       Index of terms used.

@detailmenu
 --- The Detailed Node Listing ---

Overview

* Quick start::                 A quick start guide.
* FITSJPEGcolor::               Explanations about the FITS and JPEG standards.
* Free software::               JPGtoFITS is free software.

Installation

* Requirements::                JPGtoFITS requirements
* Installing JPGtoFITS::        Installing JPGtoFITS

Requirements

* libjpeg::                     About and installation of libjpeg.
* CFITSIO::                     About and installation of CFITSIO.

Installing JPGtoFITS

* Configuring::                 How to configure JPGtoFITS.
* Tests::                       Test programs.
* Print manual::                How to rebuild the print manual.

Running JPGtoFITS

* Getting help::                Guidelines on getting help.
* Command line options::        Command line options.

Command line options

* Options::                     Command line options for JPGtoFITS

@end detailmenu
@end menu

@node Overview, Installation, Top, Top
@chapter Overview

@cindex FITS
@cindex JPEG
The FITS image standard is the primary method that data are archived
and used in astronomy. On the other hand, one of the most convenient
standards to view images on the computer or in print is the JPEG
standard. JPGtoFITS was build to be a simple and fast command line
converter (with various options for specialized behavior) from the
latter to the former. Some of the benefits provided by JPGtoFITS are:

@itemize

@item
Very few dependencies: installed easily

@item
Very fast processing.

@item
Save each color channel of the JPEG image into one extension of the
output FITS image.

@item
Uses the most basic command line tools available in any GNU/Linux
system, so it can easily be run on a large number of images.

@end itemize


@menu
* Quick start::                 A quick start guide.
* FITSJPEGcolor::               Explanations about the FITS and JPEG standards.
* Free software::               JPGtoFITS is free software.
@end menu

@node Quick start, FITSJPEGcolor, Overview, Overview
@section Quick start

@cindex Uncompress source
@cindex Source, uncompress
@cindex Build
@cindex Compile
@cindex Check
@cindex Test
Lets assume you have just downloaded the
@file{@value{PACKAGE}-@value{VERSION}.tar.gz} in @file{DOWLD}. Running
the following commands will unpack, compile, check and install
@value{PACKAGE_NAME} so you can use it anywhere in your system. Note
lines starting with @command{$} should be run as a user and those with
@command{#} as root. In either case, these two characters should not
be typed in the command line.

@example
$ cd DOWLD
$ tar -zxvf @value{PACKAGE}-@value{VERSION}.tar.gz
$ cd @value{PACKAGE}-@value{VERSION}
$ ./configure
$ make
$ make check
$ su
# make install
@end example

@noindent
If @command{$ ./configure} complains about a requirement, see
@ref{Installation}. After running @command{$ make check}, a few tests
will be done on a small test FITS image provided with the source
code. They shouldn't fail, if they do please file a bug report. You
can see the output @file{.jpg} images in
@file{DOWLD/@value{PACKAGE}-@value{VERSION}/src/}.

@cindex Quick example
@cindex Example, quick
Once it is installed, you can convert a JPEG image named
@file{JPEGimage.jpg} to JPEG with the default settings by running
@command{$ @value{PACKAGE} JPEGimage.jpg} on the command line. The
FITS image will be named @file{JPEGimage.fits} in the current
directory. To see all the options at any time, run @command{$
@value{PACKAGE} --help} or @command{$ @value{PACKAGE}
-?}. @xref{Running}, for a detailed explanation on the command line
options. Finally, you can access this whole manual anywhere on the
command line with @command{info @value{PACKAGE}}.





@node FITSJPEGcolor, Free software, Quick start, Overview
@section FITS, JPEG and color spaces

@cindex FITS standard
@cindex Standard, FITS
@cindex Standard, JPEG
It is necessary to provide some background information on FITS images,
JPEG images and color spaces in general, but here only the most
general topics can be discussed.  Therefore we just suffice to this
short section. For the intricacies of the FITS standard, the
interested reader can read the
@url{http://labs.adsabs.harvard.edu/adsabs/abs/2010A%26A...524A..42P/,
FITS standard (3.0)}. For the fascinating
details of color spaces, please see the
@url{http://en.wikipedia.org/wiki/Color_space, Wikipedia entry}.

@cindex RGB
@cindex CMYK
@cindex Image
@cindex Grayscale
@cindex Colorspace
@cindex Primary colors
@cindex Colorspace, grayscale
An image is a two dimensional array of small 2 dimensional elements
called pixels. If each pixel only has one value, the image is known as
a grayscale image and no color is defined. The range of values in the
image can be interpreted as shades of any color, it is customary to
use shades of black or grayscale. However, to produce the color
spectrum in the digital world, we need to mix several primary
colors. Therefore in a color image, each pixel has several values
depending on how many primary colors we choose. For example on the
digital monitor or a color digital cameras, all colors are built by
mixing the three colors of Red-Green-Blue (RGB) with various
proportions. However, for printing on paper, standard printers use the
Cyan-Magenta-Yellow-Key (CMYK, Key=black) color space. Therefore when
printing an RGB image, usually a transformation of color spaces will
be necessary.

In a colored digital camera, a color image is produced by dividing
pixel's area between three colors (filters). However in astronomy due
to the intrinsic faintness of most of our targets, the collecting area
of the pixel is very important for us. Hence the full area of the
pixel is used and one value is stored for that pixel in the end. One
filter is used for the whole image. Thus each FITS image extension is
inherently a grayscale image and no color can be defined for it.

So to convert a potentially colored JPEG image to a FITS image, each
color should be placed in one FITS extension. This explains why
JPGtoFITS separates the colors into multiple extensions. Also Note
that the most common form the JPEG standard usage is to assign 8-bit
to each color. Therefore, once converted to FITS, each color's pixel
values will be in the range of 0 to @math{2^8-1=255}.



@node Free software,  , FITSJPEGcolor, Overview
@section Free software

@cindex Freedom
@cindex Free software
@cindex Software, free
@value{PACKAGE_NAME} is distributed and available to you under the
@url{http://www.gnu.org/copyleft/gpl.html, GNU public license} version
3 or any later version (GPL v3+). Free software and tools (as defined
in GPL v3+) is essential for critical science to flourish. A very large
number of packages (scientific and unscientific) use this license for
distribution. Therefore if you are not already familiar with it, we
strongly encourage you to put the time and read through it once. It
gives you a lot of @emph{free}doms. As with all kinds of freedom
unless you utilize your freedom, you cannot consider your self to be
free.







@node Installation, Running, Overview, Top
@chapter Installation

To successfully install JPGtoFITS you have to have the requirements
already installed on your system. They are very basic and you might
already have them installed, to check try running the @command{$
./configure} script. If you get no errors, then you already have them
and you can skip @ref{Requirements}. You can do much more than the
simple set of scripts in @ref{Quick start}, to learn more, see
@ref{Installing JPGtoFITS}.



@menu
* Requirements::                JPGtoFITS requirements
* Installing JPGtoFITS::        Installing JPGtoFITS
@end menu

@node Requirements, Installing JPGtoFITS, Installation, Installation
@section Requirements

@cindex Dependencies, JPGtoFITS
@cindex JPGtoFITS dependencies
@value{PACKAGE_NAME} @value{VERSION} has two dependencies: libjpeg and
CFITSIO. The first is for manipulating JPEG images and the second for
FITS images.

@menu
* libjpeg::                     About and installation of libjpeg.
* CFITSIO::                     About and installation of CFITSIO.
@end menu

@node libjpeg, CFITSIO, Requirements, Requirements
@subsection libjpeg

@cindex libjpeg
@cindex SIMD instructions
@url{http://www.ijg.org/, libjpeg} is a very basic library that
provides tools to read and write JPEG images, most of the GNU/Linux
graphic programs and libraries use it. Therefore you most probably
already have it installed.  @url{http://libjpeg-turbo.virtualgl.org/,
libjpeg-turbo} is an alternative to libjpeg. It uses SIMD instructions
for ARM based systems that significantly decreases the processing time
of JPEG compression and decompression algorithms.

If @command{$ ./configure} fails to find libjpeg, then you have to
install one of the two libraries above. They should be available
within your distribution's package management tools, for example

@cindex Package managers
@itemize

@item
@command{# pacman -S libjpeg} in Arch Linux (which installs
libjpeg-turbo).

@item
@command{# apt-get install libjpeg} in Ubuntu.

@item
@command{# yum install libjpeg} in Fedora, CentOS, Scientific linux or
generally any Red Hat based GNU/Linux.

@end itemize





@node CFITSIO,  , libjpeg, Requirements
@subsection CFITSIO

@cindex CFITSIO
CFITSIO is the closest you can get to the pixels in a FITS image while
remaining faithful to the
@url{http://fits.gsfc.nasa.gov/fits_standard.html, FITS standard}. It
is written by William Pence, the author of the
@url{http://labs.adsabs.harvard.edu/adsabs/abs/2010A%26A...524A..42P/,
FITS standard (3.0)}, and is regularly updated. Setting the
definitions for all other software packages using FITS images.

Some GNU/Linux distributions have CFITSIO in their package managers
(for example Arch Linux), if it is available and updated, you can use
it. If not, you can install it from source, in this case, we strongly
recommend that you have a look through Chapter 2 (Creating the CFITSIO
library) of the the CFITSIO manual and understand the options you can
pass to @command{$ ./configure}. This is a very basic package for most
astronomical software and it is best that you configure it nicely with
your system. To install CFITSIO from source, you have to
@url{ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/cfitsio_latest.tar.gz,
download the latest version}, uncompress it and go into the downloaded
directory. Since CFITSIO also uses GNU Autoconf and GNU Automake, the
installation is very similar to that explained in @ref{Installing
JPGtoFITS}.





@node Installing JPGtoFITS,  , Requirements, Installation
@section Installing JPGtoFITS

This section is basically a longer explanation to the sequence of
commands given in @ref{Quick start}. If the default parameters are
fine for your applications, or you are already familiar with those
commands, or you don't want to remake this manual, you can skip this
section.

In the following we will assume that you have downloaded the
compressed source file, @file{@value{PACKAGE}-@value{VERSION}.tar.gz},
to the @file{DOWLD} (short for download) directory, replace this name
with the directory that you want to run the installation in. Note that
after installation, if you don't plan to re-install you no longer need
this file or the uncompressed directory. The first three steps in
@ref{Quick start} need no extra explanation so in the following we
also assume they are done. Once you uncompress the source file the
directory @file{DOWLD/@value{PACKAGE}-@value{VERSION}} will be
created. From now on, we will call this directory @file{SCRDIR}.

@value{PACKAGE_NAME} uses GNU Autoconf and GNU Automake to configure
and build its self in your particular system. These tools are highly
customizable to fit any kind of system. A complete explanation is
beyond the scope of this manual but enough acquaintance with these
tools will significantly enhance your life in the GNU/Linux ecosystem.

@value{PACKAGE_NAME} has been written and only tested on GNU/Linux, I
am curious to see if it is possible to install it on other systems
(for example Mac OS or MS-Windows) too. However, I don't have and use
such proprietary operating systems. So if you would like it there and
are willing to help, please contact me, see @ref{Future updates}.

@menu
* Configuring::                 How to configure JPGtoFITS.
* Tests::                       Test programs.
* Print manual::                How to rebuild the print manual.
@end menu




@node Configuring, Tests, Installing JPGtoFITS, Installing JPGtoFITS
@subsection Configuring

The @command{$ ./configure} step is the most important step in the
build process. All the required packages, libraries, headers and
environment variables are checked in this step. The behaviors of make
and make install can also be set through command line options to this
command. A complete explanation of these options is beyond the scope
of this short manual. But we will try to review the most important
cases.

@cindex root, not possible
@cindex Superuser, not possible
In case you do not have super user or root access to the system, you
can't take the last two steps of the command sequence in @ref{Quick
start}. To be able to access the built @file{fitstojpg} executable
file from anywhere, you have to specify special directory in your
owned directories, for example @file{MYUSR}, and tell configure to
install the compiled file to this directory through the command:

@cindex Install directory
@cindex Directory, install
@example
$ ./configure --prefix=MYUSR
@end example

@noindent
You will also have to add @file{MYUSR} to your @command{PATH}
environment variable. If you have a specific file for @file{MYUSR},
you can do this for all programs that use the GNU build system, not
just JPGtoFITS.





@node Tests, Print manual, Configuring, Installing JPGtoFITS
@subsection Tests

@cindex @command{make check}
@cindex @file{mock.fits}
@cindex Tests, running
@cindex Checking tests
Currently two simple tests and a very small JPEG image I took in
autumn of a beautiful red tree infront of the Tohoku University
Astronomical Institute is also included in the downloaded package:
@file{SRCDIR/src/}. The test scripts are all the files ending with
@file{.sh} and they all run on the JPEG file
@file{autumnintohoku.jpg}. You can run the tests after you have built
the package (using @command{$ make}) with the command:

@example
$ make check
@end example

@cindex Tests, results
@cindex Results of tests
If you are using a sufficiently modern terminal, the outcome of the
tests will be either colored green, showing that all the tests passed
successfully, or red showing that at least one test failed. None of
the tests should fail. If any does fail, please inform us so we see
what the problem was.

@cindex Tests, @file{.sh} scripts
@cindex Shell test scripts
By examining the @file{.sh} test scripts, you can see some example of
how @value{PACKAGE_NAME} is best used. Note that when running the test
scripts, you haven't installed @value{PACKAGE_NAME} yet, that is why
it is called with the @command{./@value{PACKAGE}}. After you install
it, you don't need the preceding @command{./}. To be more educative,
we have also only used the long format of the options, when typing on
the command line, it might be easier for you to use the short
formats. Generally, when writing a script (that you will save for
future use) it is advised to use the long formats of the options,
because the short ones will soon be forgotten.

The tests will be increased in time to include all the capabilities of
@value{PACKAGE_NAME}. So if the tests pass, you can safely install the
@value{PACKAGE_NAME} on a system-wide directory.





@node Print manual,  , Tests, Installing JPGtoFITS
@subsection Print manual

@cindex Print manual
@cindex Modifying print manual
@cindex A4 paper size
@cindex US letter paper size
@cindex Paper size, A4
@cindex Paper size, US letter
The default print manual is provided in the letter paper size. If you
would like to have the print version of this manual on paper and you
are living in a country which uses A4, then you can rebuild the manual
for your local paper size. The great thing about the GNU build system
is that the manual source code which is in Texinfo is also distributed
with the program source code, enabling you to do such customizations
(hackings).

In order to change the paper size, you will need to have @TeX{}
installed. Open the @file{SRCDIR/doc/fitstojpg.texi} with any text
editor. This is the source file that created this manual. In the first
few lines you will see this line:

@example
@@c@@afourpaper
@end example

@noindent
In Texinfo, a line is commented with @code{@@c}. Therefore, uncomment
this line by deleting the first two characters such that it changes
to:

@example
@@afourpaper
@end example

@noindent
Save the file and close it. You can now run

@example
$ cd SRCDIR
$ make pdf
@end example

@noindent
and the new pdf manual will be available in
@file{SRCDIR/doc/@value{PACKAGE}.pdf}. By changing the @command{pdf}
in @command{$ make pdf} to @command{ps} or @command{dvi} you can have
the manual in those formats. Note that you can do this for any manual
that is in Texinfo format, they might not have 










@node Running, Future updates, Installation, Top
@chapter Running JPGtoFITS

@cindex Example, quick
The most basic way to run @value{PACKAGE_NAME} is with the command
@command{$ @value{PACKAGE} JPEGimage.jpg}. This will create a FITS
image which is named @file{JPEGimage.fits} in the current directory.

JPGtoFITS only has one mandatory argument: the input JPEG image name
(which has to end in @file{.jpg}, @file{.jpeg}, @file{.JPG} or
@file{.JPEG}). The output FITS name can also be given as an argument
but it is optional. If no FITS image name is given as an argument,
then the name of the output will be determined from the input file's
name. All the potential directory structure attached to it stripped
off and the ending is changed to @file{.fits}. For example:

@example
$ pwd
/home/username/FITSfiles
$ ls
ABC001.fits
$ jpgtofits /home/username/JPEGarchive/ABC002.jpg
$ ls
ABC001.fits ABC002.fits
@end example

Besides the input JPEG image, you can also @emph{optionally} specify
the name of the output FITS image on the command line without any
options. Any name that ends with @file{.fits} will be considered as an
output FITS image name. Note that if it already exists, the existing
file will silently be replaced.

@menu
* Getting help::                Guidelines on getting help.
* Command line options::        Command line options.
@end menu

@node Getting help, Command line options, Running, Running
@section Getting help

So you are busy writing doing your work but you have forgot the names
of the options or the default values. You don't feel like finding the
PDF file you might have saved or printed in your archives or to go to
the internet. You want to get back to your exciting work as fast as
possible. Here are some ways you can get to what you want very
fast. Note that these apply to most GNU/Linux programs, not just
JPGtoFITS.

@itemize

@item
The easiest and fastest way is to run @command{$ @value{PACKAGE}
--help}. This will print a list of all the options, their default
values and a short description. The default values for each option
with a value are specified inside square brackets immediately before
the explanation for that option, for example:
@example
-K, --keepnamedir          Keep directory information for output.
@end example

@item
If you know the values you want to supply but forgot the exact short
option characters or long option name, you can run @command{$
@value{PACKAGE} --usage}. This will give you a compact but full list
of all the options in both short and long format.

@item
In case you need more information than @option{--help} can provide,
and you think a look through the manual would be great, run
@example
$ info @value{PACKAGE}
@end example
This will open up this whole document in the command line and you can
easily navigate it using the fabulously easy and useful @command{info}
program. In case you are not familiar with it already, put aside half
an hour of your time and run @command{$ info info}, it does a
fantastic job in explaining all its capabilities its self. Since all
GNU software documentation is also provided in info, your whole
GNU/Linux life will significantly become easier. Once your become
efficient in it, you can navigate to any part of this manual or any
other GNU software manual, no matter how long it is, in a matter of
seconds. It also blends nicely with GNU Emacs (a text editor) and you
can search manuals while you are writing your document or programs
without taking your hands off the keyboard.

@end itemize

@node Command line options,  , Getting help, Running
@section Command line options

You can specify the behavior of @value{PACKAGE_NAME} with command
line options.  The same rules that specify the command line options in
nearly all GNU/Linux programs also apply for @value{PACKAGE_NAME},
here are some of the factors:

@itemize

@item
Each option can be called in two ways: @emph{short} or @emph{long}. In
the list below, for options that have both formats, first the short is
shown then the long. Short options are only one character and only
have one hyphen (for example @option{-e}) while long options have two
hyphens an can have many characters (for example @option{--imgext}.

@item
Some options need to be given a value if they are called and some
don't. You can think of the latter type of options as an on/off
option. In @value{PACKAGE_NAME}'s @option{--help} output, if a value
is required, one of the three cases below follows the long option:

@itemize

@item
@option{=STR}: The value is read as a strong (for example a file
name).

@end itemize

In this manual, the same values will be put immediately before the
explanation, for example (@option{=STR}).

@item
To specify a value in the short format, simply put the value after the
option (with or without white space). For the long option you either
need white space or an @option{=} sign, for example @option{-e2},
@option{-e 2}, @option{--imgext 2} or @option{--imgext=2} are all
equivalent.

@item
Short options with no values can be concatenated for example the
hypothetical options @option{-a -b -c4} is equivalent to
@option{-abc4}.

@item
In the long format, you don't have to write the full option name, only
long enough for the option to be unambiguously identified. If it is
ambiguous, then @value{PACKAGE_NAME} will warn you.

@end itemize

Currently JPGtoFITS doesn't have too many options. In the future more
options will be added.


@menu
* Options::                     Command line options for JPGtoFITS
@end menu

@node Options,  , Command line options, Command line options
@subsection Options

These options that JPGtoFITS currently accepts:

@vtable @option

@item -?
@itemx --help
Print out a short help message showing all the options with a brief
explanation, see @ref{Getting help}.

@item -f
@itemx --hflip
If you simply convert the pixels of a JPEG image to a FITS image, the
image will be flipped along the horizontal axis when you look at it in
a FITS image viewer, for example SAO ds9. So by default, JPGtoFITS
will flip the image along the horizontal axis passing through the
center of the image to make it look the same. If you call this option,
the default behaviour is not used. There is no interpolation in the
flipping process, so you can be sure about the pixel values remaining
unchanged.

@item -K
@itemx --keepnamedir
By default the directory information of the output name will be
stripped off so the output will be in the current directory with the
file name of the output name. If you call this option, the full
directory structure will remain for the output too. Note that this
applies both to the cases where you set an output name as an argument
or as a value to the @option{--output} option.

@item -o
@item --output
Specify the name of the output file, possibly with directory
information and in any kind of file name extension.

@item --usage
Print a very compact list of all the options.

@item -V
@itemx --version
Print the version and copyright information.

@end vtable




@node Future updates, Index, Running, Top
@chapter Future updates
There are many things to do, this is my current to-do list. I will try
to implement them when ever I get some time. Currently I don't have
any rush because I don't immediately need these capabilities. But as
soon as I find some free time they will be implemented.  If you feel
these updates, or other updates can be useful for your work, please
contact me so we can implement them. If you are familiar enough with
the C programming language, it would be great if you could also
contribute so it can be done faster. Of course, all contributions will
be respectfully acknowledged.

In case you have any suggestions which you would like
@value{PACKAGE_NAME} to do, please also inform me to add to this list
and implement in due time.

@itemize

@item
Only convert a portion of the FITS image.

@item
Set pixel value thresholds.

@item
Check and make the building and installation process work on Mac and
possibly MS-Windows systems too. I have no experience on them and
don't have any systems running them, so I would need someone else's
help.

@end itemize










@c Print the index and finish:
@node Index,  , Future updates, Top
@unnumbered Index
@printindex cp

@bye
